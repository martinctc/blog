I"É<section class="main-content">
<div id="introduction" class="section level2">
<h2>Introduction</h2>
<p>This post will show you how to write and read a list of data tables to and from Excel with <a href="https://purrr.tidyverse.org/"><strong>purrr</strong></a>, the functional programming package üì¶ from <strong>tidyverse</strong>. In this example I will also use the packages <strong>readxl</strong> and <strong>writexl</strong> for reading and writing in Excel files, and cover methods for both XLSX and CSV (not strictly Excel, but might as well!) files.</p>
<p><img src="http://localhost:4000/blog/images/hex-purrr.png" width="20%" style="float:right; padding:10px" /></p>
<p><img src="http://localhost:4000/blog/images/readxl.png" width="20%" style="float:right; padding:10px" /></p>
<p>Whilst the internet is certainly in no shortage of R tutorials on how to read and write Excel files (see <a href="https://stackoverflow.com/questions/32888757/how-can-i-read-multiple-excel-files-into-r">this Stack Overflow thread</a> for example), I think a <strong>purrr</strong> approach still isn‚Äôt as well-known or well-documented. I find this approach to be very clean and readable, and certainly more ‚Äútidyverse-consistent‚Äù than other approaches which rely on <code>lapply()</code> or for loops. My choice of packages üì¶ for reading and writing Excel files are <a href="https://readxl.tidyverse.org/">readxl</a> and <a href="https://docs.ropensci.org/writexl/">writexl</a>, where the advantage is that neither of them require external dependencies.</p>
<p>For reading and writing CSV files, I personally have switched back and forth between <strong>readr</strong> and <strong>data.table</strong>, depending on whether I have a need to do a particular analysis in <strong>data.table</strong> (see <a href="https://martinctc.github.io/blog/using-data.table-with-magrittr-pipes-best-of-both-worlds/">this discussion</a> on why I sometimes use it in favour of <strong>dplyr</strong>). Where applicable in this post, I will point out in places where you can use alternatives from <a href="https://github.com/Rdatatable/data.table/wiki">data.table</a> for fast reading/writing.</p>
<p>For documentation/demonstration purposes, I‚Äôll make the package references (indicated by <code>::</code>) explicit in the functions below, but it‚Äôs advisable to remove them in ‚Äúreal life‚Äù to avoid code that is overly verbose.</p>
<hr />
</div>
<div id="getting-started" class="section level2">
<h2>Getting Started</h2>
<p>The key functions used in this vignette come from three packages: <strong>purrr</strong>, <strong>readxl</strong>, and <strong>writexl</strong>.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode r"><code class="sourceCode r"><span class="kw">library</span>(tidyverse)
<span class="kw">library</span>(readxl)
<span class="kw">library</span>(writexl)</code></pre></div>
<p>Since <strong>purrr</strong> is part of core <strong>tidyverse</strong>, we can simply run <code>library(tidyverse)</code>. This is also convenient as we‚Äôll also use various functions such as <code>group_split()</code> from <strong>dplyr</strong> and the <code>%&gt;%</code> operator from <strong>magrittr</strong> in the example.</p>
<p>Note that although <strong>readxl</strong> is part of tidyverse, you‚Äôll still need to load it explicitly as it‚Äôs not a ‚Äúcore‚Äù tidyverse package.</p>
<hr />
</div>
<div id="writing-multiple-excel-files" class="section level2">
<h2>Writing multiple Excel files</h2>
<p>Let us start off with the <strong>iris</strong> dataset that is pre-loaded with R. If you‚Äôre not one of us sad people who almost know this dataset by heart, here‚Äôs what it looks like:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode r"><code class="sourceCode r">iris <span class="op">%&gt;%</span><span class="st"> </span><span class="kw">head</span>()</code></pre></div>
<pre><code>##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa</code></pre>
<p>The first thing that we want to do is to create multiple datasets, which we can do so by splitting <strong>iris</strong>. I‚Äôll do this by running <code>group_split()</code> on the <strong>Species</strong> column, so that each species of iris has its own dataset. This will return a list of three data frames, one for each unique value in <strong>Species</strong>: <em>setosa</em>, <em>versicolor</em>, and <em>virginica</em>. I‚Äôll assign these three data frames to a list object called <code>list_of_dfs</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode r"><code class="sourceCode r"><span class="co"># Split: one data frame per Species</span>
iris <span class="op">%&gt;%</span>
<span class="st">  </span>dplyr<span class="op">::</span><span class="kw">group_split</span>(Species) -&gt;<span class="st"> </span>list_of_dfs
</code></pre></div></div></section>
:ET